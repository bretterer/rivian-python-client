type Query {
  currentUser: User
  delivery(orderId: ID!): Delivery
  getVehicle(id: String!): Vehicle
  getVehicleCommand(id: String!): GetVehicleCommandState
  getVehicleMobileImages(
    resolution: String
    extension: String
    version: String
  ): VehicleMobileImage
  getVehicleOrderMobileImages(
    resolution: String
    extension: String
    version: String
  ): VehicleMobileImage
  planTrip(
    origin: CoordinatesInput!
    destination: CoordinatesInput!
    bearing: Float!
    vehicleId: String!
    startingSoc: Float!
    startingRangeMeters: Float!
    targetArrivalSocPercent: Float
    networkPreferences: [NetworkPreference!]
  ): PlanTripResponse
  vehicleState(id: String!): VehicleState
}

type Mutation {
  createCsrfToken: CreateCsrfTokenResponse
  createDepartureSchedule(
    vehicleId: String!
    schedule: InputDepartureSchedule!
  ): Success
  deleteDepartureSchedule(vehicleId: String!, scheduleId: String!): Success
  departNow(vehicleId: String!, scheduleId: String!, skipDate: String!): Success
  disenrollPhone(attrs: DisenrollPhoneAttributes!): DisenrollPhoneResponse
  enrollPhone(attrs: EnrollPhoneAttributes!): EnrollPhoneResponse
  login(email: String!, password: String!): LoginResponse
  loginWithOTP(
    email: String!
    otpToken: String!
    otpCode: String!
  ): MobileLoginResponse
  logout: LogoutResponse
  resendOTPCode(otpToken: String!): ResendOTPCodeResponse
  sendVehicleCommand(attrs: VehicleCommandAttributes!): SendVehicleCommandState
  setChargingSchedules(
    vehicleId: String!
    chargingSchedules: [InputChargingSchedule!]!
  ): OK
  setVehicleName(vehicleId: String!, name: String!): OK
  skipNextScheduledDeparture(
    vehicleId: String!
    scheduleId: String!
    skipDate: String!
  ): Success
  updateDepartureSchedule(
    vehicleId: String!
    scheduleId: String!
    schedule: InputDepartureSchedule!
  ): Success
}

type Subscription {
  chargingSession(vehicleId: String!): ChargingSession!
  otaInstallSchedules(vehicleId: String!): ParallaxMessageResponse!
  otaInstallState(vehicleId: String!): ParallaxMessageResponse!
  vehicleCloudConnection(id: String!): VehicleCloudConnection!
  vehicleCommandState(id: String!): GetVehicleCommandState!
  vehicleDepartureSchedules(vehicleId: String!): [DepartureSchedule!]!
  vehicleGeofences(vehicleId: String!): ParallaxMessageResponse
  vehicleState(id: String!): VehicleState!
}

enum DefogDefrostLevel {
  Off
  Defog
  Defrost
}

enum SurfaceHeatVentLevel {
  Off
  Heat1
  Heat2
  Heat3
  Vent1
  Vent2
  Vent3
}

enum WeekDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

input DisenrollPhoneAttributes {
  enrollmentId: String!
}

input EnrollPhoneAttributes {
  userId: String!
  vehicleId: String!
  publicKey: String!
  type: String!
  name: String
}

input InputChargingSchedule {
  weekDays: [String!]!
  startTime: Int!
  duration: Int!
  location: CoordinatesInput!
  amperage: Int!
  enabled: Boolean!
}

input InputComfortSettings {
  surfaceHeatVentLevels: InputSurfaceHeatVentLevels!
  cabinTempCelsius: Float!
  frontDefogDefrost: DefogDefrostLevel!
}

input InputDepartureSchedule {
  name: String!
  isEnabled: Boolean!
  repeatsWeekly: InputRepeatsWeekly!
  departureSettings: InputDepartureSettings!
}

input InputDepartureSettings {
  shouldOverrideChargeSchedule: Boolean!
  comfortSettings: InputComfortSettings!
}

input InputRepeatsWeekly {
  days: [WeekDay!]!
  startsAtMin: Int!
  skippedOn: [String!]!
}

input InputSurfaceHeatVentLevels {
  frontLeftSeat: SurfaceHeatVentLevel!
  frontRightSeat: SurfaceHeatVentLevel!
  rearLeftSeat: SurfaceHeatVentLevel!
  rearRightSeat: SurfaceHeatVentLevel!
  steeringWheel: SurfaceHeatVentLevel!
}

input NetworkPreference {
  networkId: String!
  preference: Float
}

input VehicleCommandAttributes {
  command: String!
  hmac: String!
  timestamp: String!
  vasPhoneId: String!
  deviceId: String!
  vehicleId: String!
  params: VehicleCommandParameters
}

input VehicleCommandParameters {
  level: Int
  HVAC_set_temp: Float
  SOC_limit: Int
}

interface TimeStamped {
  timeStamp: String!
}

type CampSpeaker {
  id: String!
  serialNumber: String!
}

type ChargingChartData {
  soc: Float!
  powerKW: Float!
  startTime: Float!
  endTime: Float!
  timeEstimationValidityStatus: String!
  vehicleChargerState: String!
}

type ChargingLiveData {
  powerKW: Float!
  kilometersChargedPerHour: Float!
  rangeAddedThisSession: Float!
  totalChargedEnergy: Float!
  timeElapsed: Float
  timeRemaining: Float
  price: Float
  currency: String
  isFreeSession: Boolean
}

type ChargingSchedule {
  startTime: Int!
  duration: Int!
  location: GeoCoordinates!
  amperage: Int!
  enabled: Boolean!
  weekDays: [String!]!
}

type ChargingSession {
  chartData: [ChargingChartData!]!
  liveData: ChargingLiveData!
}

type ComfortSettings {
  surfaceHeatVentLevels: SurfaceHeatVentLevels!
  cabinTempCelsius: Float!
  frontDefogDefrost: DefogDefrostLevel!
}

type CreateCsrfTokenResponse {
  csrfToken: String!
  appSessionToken: String!
}

type Delivery {
  status: String!
  carrier: String!
  deliveryAddress: DeliveryAddressDetails!
  appointmentDetails: DeliveryAppointment!
  vehicleVIN: String!
}

type DeliveryAddressDetails {
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  zipcode: String!
}

type DeliveryAppointment {
  appointmentId: String!
  startDateTime: String!
  endDateTime: String!
  timeZone: String!
}

type DepartureSchedule {
  id: String!
  name: String!
  isEnabled: Boolean!
  occurrence: RepeatsWeekly!
  departureSettings: DepartureSettings!
}

type DepartureSettings {
  shouldOverrideChargeSchedule: Boolean!
  comfortSettings: ComfortSettings!
}

type DisenrollPhoneResponse {
  success: Boolean!
}

type EnrollPhoneResponse {
  success: Boolean!
}

type GeoCoordinates {
  latitude: Float!
  longitude: Float!
}

type GetVehicleCommandState {
  id: String!
  command: String!
  createdAt: String!
  state: Int!
  responseCode: Int
  statusCode: Int
}

type LogoutResponse {
  success: Boolean!
}

type MobileLoginResponse {
  accessToken: String!
  refreshToken: String!
  userSessionToken: String!
}

type MobileMFALoginResponse {
  otpToken: String!
}

type NameSetting {
  value: String!
}

type OK {
  success: Boolean!
  value: String
}

type OTAUpdateDetails {
  url: String!
  version: String!
  locale: String!
}

type ParallaxMessageResponse {
  payload: String! # base64 encoded??
  sequenceNumber: Int!
}

type PlanTripResponse {
  routes: [Route!]!
  tripPlanStatus: String!
  chargeStationsAvailable: Boolean!
  socBelowLimit: Boolean!
}

type ProvisionedUser {
  firstName: String!
  lastName: String!
  email: String!
  userId: String!
  roles: [String!]!
  devices: [ProvisionedUserDevice!]!
}

type ProvisionedUserDevice {
  type: String!
  mappedIdentityId: String!
  id: String!
  hrid: String
  deviceName: String!
  isPaired: Boolean!
  isEnabled: Boolean!
}

type RegistrationChannel {
  type: String!
}

type RepeatsWeekly {
  days: [WeekDay!]!
  startsAtMin: Int!
  skippedOn: [String!]!
}

type ResendOTPCodeResponse {
  success: Boolean!
}

type Route {
  routeResponse: String!
  destinationReached: Boolean!
  totalChargingDuration: Int!
  arrivalSOC: Int!
  arrivalReachableDistance: Float!
  waypoints: [WayPoint!]!
  energyConsumptionOnLeg: Float
  batteryEmptyToDestinationDistance: Float
  batteryEmptyLocationLatitude: Float
  batteryEmptyLocationLongitude: Float
}

type SendVehicleCommandState {
  id: String!
  command: String!
  state: Int!
}

type Success {
  success: Boolean!
}

type SupportedFeature {
  name: String!
  status: String!
}

type SurfaceHeatVentLevels {
  frontLeftSeat: SurfaceHeatVentLevel!
  frontRightSeat: SurfaceHeatVentLevel!
  rearLeftSeat: SurfaceHeatVentLevel!
  rearRightSeat: SurfaceHeatVentLevel!
  steeringWheel: SurfaceHeatVentLevel!
}

type TimeStampedFloat implements TimeStamped {
  timeStamp: String!
  value: Float!
}

type TimeStampedNullableFloat implements TimeStamped {
  timeStamp: String!
  value: Float
}

type TimeStampedInt implements TimeStamped {
  timeStamp: String!
  value: Int!
}

type TimeStampedString implements TimeStamped {
  timeStamp: String!
  value: String!
}

type UnprovisionedUser {
  email: String!
  inviteId: String!
  status: String!
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  address: UserAddress!
  enrolledPhones: [UserEnrolledPhone]!
  pendingInvites: [UserInvitation!]!
  phones: [UserPhone!]!
  registrationChannels: [RegistrationChannel!]!
  vehicles: [UserVehicle!]!
}

type UserAddress {
  country: String!
}

type UserEnrolledPhone {
  vas: UserEnrolledPhoneAccess!
  enrolled: [UserEnrolledPhoneEntry!]!
}

type UserEnrolledPhoneAccess {
  vasPhoneId: String!
  publicKey: String!
}

type UserEnrolledPhoneEntry {
  deviceType: String!
  deviceName: String!
  vehicleId: String!
  identityId: String!
  shortName: String!
}

type UserInvitation {
  id: String!
  invitedByFirstName: String
  role: String
  status: String
  vehicleId: String
  vehicleModel: String
  email: String
}

type UserPhone {
  countryCode: String!
  formatted: String!
  phone: String!
  national: String!
}

type UserVehicle {
  id: String!
  vin: String!
  name: String!
  owner: String
  state: String
  createdAt: String!
  updatedAt: String
  vas: UserVehicleAccess!
  vehicle: Vehicle!
  roles: [String!]!
  connectedProducts: [ConnectedProduct!]!
}

type UserVehicleAccess {
  vasVehicleId: String!
  vehiclePublicKey: String!
}

type UserVehicleSettingsMap {
  name: NameSetting!
}

type Vehicle {
  id: String!
  vin: String!
  make: String!
  model: String!
  modelYear: Int!
  expectedBuildDate: String
  plannedBuildDate: String
  expectedGeneralAssemblyStartDate: String
  actualGeneralAssemblyDate: String
  otaEarlyAccessStatus: Boolean!
  currentOTAUpdateDetails: OTAUpdateDetails!
  availableOTAUpdateDetails: OTAUpdateDetails
  mobileConfiguration: VehicleMobileConfiguration!
  settings: UserVehicleSettingsMap!
  vehicleState: VehicleState!
  invitedUsers: [InvitedUser!]!
  chargingSchedules: [ChargingSchedule!]!
  estimatedRange(startSoc: Float!): Float!
}

type VehicleCloudConnection {
  isOnline: Boolean!
  lastSync: String
}

type VehicleLocation implements TimeStamped {
  timeStamp: String!
  latitude: Float!
  longitude: Float!
  isAuthorized: Boolean
  consentStatus: String
}

type VehicleLocationError implements TimeStamped {
  timeStamp: String!
  bearing: Float!
  positionHorizontal: Float!
  positionVertical: Float!
  speed: Float!
}

type VehicleMobileConfiguration {
  trimOption: VehicleMobileConfigurationOption!
  driveSystemOption: VehicleMobileConfigurationOption!
  exteriorColorOption: VehicleMobileConfigurationOption!
  interiorColorOption: VehicleMobileConfigurationOption!
}

type VehicleMobileConfigurationOption {
  optionId: String!
  optionName: String!
}

type VehicleMobileImage {
  orderId: String
  vehicleId: String
  design: String!
  extension: String!
  placement: String!
  resolution: String!
  size: String!
  url: String!
  overlays: [VehicleMobileImageOverlay!]!
}

type VehicleMobileImageOverlay {
  url: String!
  overlay: String!
  zIndex: Int!
}

type VehicleState {
  activeDriverName: TimeStampedString

  alarmSoundStatus: TimeStampedString

  batteryCapacity: TimeStampedFloat
  batteryCellType: TimeStampedString
  batteryHvThermalEvent: TimeStampedString
  batteryHvThermalEventPropagation: TimeStampedString
  batteryLevel: TimeStampedFloat
  batteryLimit: TimeStampedInt
  batteryNeedsLfpCalibration: TimeStampedInt

  brakeFluidLow: TimeStampedString

  btmFfHardwareFailureStatus: TimeStampedString
  btmIcHardwareFailureStatus: TimeStampedString
  btmLfdHardwareFailureStatus: TimeStampedString
  btmOcHardwareFailureStatus: TimeStampedString
  btmRfdHardwareFailureStatus: TimeStampedString
  btmRfHardwareFailureStatus: TimeStampedString

  cabinClimateDriverTemperature: TimeStampedFloat
  cabinClimateInteriorTemperature: TimeStampedFloat
  cabinPreconditioningStatus: TimeStampedString
  cabinPreconditioningType: TimeStampedString

  carWashMode: TimeStampedString

  chargePortState: TimeStampedString
  chargerDerateStatus: TimeStampedString
  chargerState: TimeStampedString
  chargerStatus: TimeStampedString
  chargingDisabledAC: TimeStampedInt
  chargingDisabledACFaultState: TimeStampedInt
  chargingDisabledAll: TimeStampedInt
  chargingTimeEstimationValidity: TimeStampedString

  closureChargePortDoorNextAction: TimeStampedString
  closureFrunkClosed: TimeStampedString
  closureFrunkLocked: TimeStampedString
  closureFrunkNextAction: TimeStampedString
  closureLiftgateClosed: TimeStampedString
  closureLiftgateLocked: TimeStampedString
  closureLiftgateNextAction: TimeStampedString
  closureSideBinLeftClosed: TimeStampedString
  closureSideBinLeftLocked: TimeStampedString
  closureSideBinLeftNextAction: TimeStampedString
  closureSideBinRightClosed: TimeStampedString
  closureSideBinRightLocked: TimeStampedString
  closureSideBinRightNextAction: TimeStampedString
  closureTailgateClosed: TimeStampedString
  closureTailgateLocked: TimeStampedString
  closureTailgateNextAction: TimeStampedString
  closureTonneauClosed: TimeStampedString
  closureTonneauLocked: TimeStampedString
  closureTonneauNextAction: TimeStampedString

  cloudConnection: VehicleCloudConnection

  coldRangeNotification: TimeStampedString

  defrostDefogStatus: TimeStampedString

  distanceToEmpty: TimeStampedInt

  doorFrontLeftClosed: TimeStampedString
  doorFrontLeftLocked: TimeStampedString
  doorFrontRightClosed: TimeStampedString
  doorFrontRightLocked: TimeStampedString
  doorRearLeftClosed: TimeStampedString
  doorRearLeftLocked: TimeStampedString
  doorRearRightClosed: TimeStampedString
  doorRearRightLocked: TimeStampedString

  driveMode: TimeStampedString

  gearGuardLocked: TimeStampedString
  gearGuardVideoMode: TimeStampedString
  gearGuardVideoStatus: TimeStampedString
  gearGuardVideoTermsAccepted: TimeStampedString
  gearStatus: TimeStampedString

  gnssAltitude: TimeStampedNullableFloat
  gnssBearing: TimeStampedFloat
  gnssError: VehicleLocationError
  gnssLocation: VehicleLocation
  gnssSpeed: TimeStampedFloat

  limitedAccelCold: TimeStampedInt
  limitedRegenCold: TimeStampedInt

  otaAvailableVersion: TimeStampedString
  otaAvailableVersionGitHash: TimeStampedString
  otaAvailableVersionNumber: TimeStampedInt
  otaAvailableVersionWeek: TimeStampedInt
  otaAvailableVersionYear: TimeStampedInt
  otaCurrentStatus: TimeStampedString
  otaCurrentVersion: TimeStampedString
  otaCurrentVersionGitHash: TimeStampedString
  otaCurrentVersionNumber: TimeStampedInt
  otaCurrentVersionWeek: TimeStampedInt
  otaCurrentVersionYear: TimeStampedInt
  otaDownloadProgress: TimeStampedInt
  otaInstallDuration: TimeStampedInt
  otaInstallProgress: TimeStampedInt
  otaInstallReady: TimeStampedString
  otaInstallTime: TimeStampedInt
  otaInstallType: TimeStampedString
  otaStatus: TimeStampedString

  petModeStatus: TimeStampedString
  petModeTemperatureStatus: TimeStampedString

  powerState: TimeStampedString

  rangeThreshold: TimeStampedString

  rearHitchStatus: TimeStampedString

  remoteChargingAvailable: TimeStampedInt

  seatFrontLeftHeat: TimeStampedString
  seatFrontLeftVent: TimeStampedString
  seatFrontRightHeat: TimeStampedString
  seatFrontRightVent: TimeStampedString
  seatRearLeftHeat: TimeStampedString
  seatRearRightHeat: TimeStampedString
  seatThirdRowLeftHeat: TimeStampedString
  seatThirdRowRightHeat: TimeStampedString

  serviceMode: TimeStampedString

  steeringWheelHeat: TimeStampedString

  timeToEndOfCharge: TimeStampedFloat

  tirePressureFrontLeft: TimeStampedNullableFloat # only available via subscription
  tirePressureFrontRight: TimeStampedNullableFloat # only available via subscription
  tirePressureRearLeft: TimeStampedNullableFloat # only available via subscription
  tirePressureRearRight: TimeStampedNullableFloat # only available via subscription
  tirePressureStatusFrontLeft: TimeStampedString
  tirePressureStatusFrontRight: TimeStampedString
  tirePressureStatusRearLeft: TimeStampedString
  tirePressureStatusRearRight: TimeStampedString
  tirePressureStatusValidFrontLeft: TimeStampedString
  tirePressureStatusValidFrontRight: TimeStampedString
  tirePressureStatusValidRearLeft: TimeStampedString
  tirePressureStatusValidRearRight: TimeStampedString

  trailerStatus: TimeStampedString

  twelveVoltBatteryHealth: TimeStampedString

  vehicleMileage: TimeStampedInt

  windowFrontLeftCalibrated: TimeStampedString
  windowFrontLeftClosed: TimeStampedString
  windowFrontRightCalibrated: TimeStampedString
  windowFrontRightClosed: TimeStampedString
  windowRearLeftCalibrated: TimeStampedString
  windowRearLeftClosed: TimeStampedString
  windowRearRightCalibrated: TimeStampedString
  windowRearRightClosed: TimeStampedString
  windowsNextAction: TimeStampedString

  wiperFluidState: TimeStampedString

  supportedFeatures: [SupportedFeature!]!
}

type WayPoint {
  waypointType: String!
  entityId: String
  name: String
  latitude: Float!
  longitude: Float!
  maxPower: Int
  chargeDuration: Int
  arrivalSOC: Int!
  arrivalReachableDistance: Float!
  departureSOC: Int!
  departureReachableDistance: Float!
}

union ConnectedProduct = CampSpeaker
union InvitedUser = ProvisionedUser | UnprovisionedUser
union LoginResponse = MobileLoginResponse | MobileMFALoginResponse
